
variables:
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn

trigger:
  branches:
    include:
      - main  # Replace 'main' with your main branch name

pr: none  # Disable CI builds for pull requests

pool:
  vmImage: 'ubuntu-latest'  # Choose the appropriate agent image

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '18.x'  # Ensure Node.js 14 or later version is installed
  displayName: 'Install Node.js'

- task: Cache@2
  inputs:
    key: '"yarn" | "$(Agent.OS)" | yarn.lock'
    restoreKeys: |
       "yarn" | "$(Agent.OS)"
       "yarn"
    path: $(YARN_CACHE_FOLDER)
  displayName: Cache Yarn packages

- script: |
    yarn install --frozen-lockfile
  displayName: 'Install Dependencies'

- script: |
    yarn run build
  displayName: 'Build Application'

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(System.DefaultWorkingDirectory)/build'
    targetFolder: '$(Build.ArtifactStagingDirectory)/aquifer-web-$(Build.BuildId)'
    contents: '**'
  displayName: 'Copy build files'

- publish: $(Build.ArtifactStagingDirectory)
  artifact: drop

# You can now add deployment steps below, depending on your deployment target.
# The following is an example for deploying to Azure Static Web Apps:

- task: AzureStaticWebApp@0
  inputs:
    skip_app_build: true
    cwd: '$(Pipeline.Workspace)/drop/aquifer-web-$(Build.BuildId)'
    app_location: ''
    api_location: ''  # Leave this empty if you don't have Azure Functions
    output_location: ''  # Leave this empty to use the default
    azure_static_web_apps_api_token: $(AzureStaticWebAppsApiToken)  # Create an Azure DevOps variable group containing the API token for authentication

  # Add additional steps for post-deployment tasks if needed

