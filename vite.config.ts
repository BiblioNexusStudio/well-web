import { sveltekit } from '@sveltejs/kit/vite';
import { defineConfig } from 'vitest/config';
import { SvelteKitPWA } from '@vite-pwa/sveltekit';

const kitConfig = {
    adapterFallback: '/index.html',
};

export default defineConfig({
    plugins: [
        sveltekit(),
        SvelteKitPWA({
            registerType: 'autoUpdate',
            workbox: {
                // include all client files and the index "fallback" file
                globPatterns: [
                    'client/**/*.{html,js,css,ico,png,svg,webp,webmanifest}',
                    '../../build/index.html',
                ],

                runtimeCaching: [
                    {
                        // TODO: update this with the Aquifer API URL
                        urlPattern: /.*/,
                        handler: 'StaleWhileRevalidate',
                        method: 'GET',
                        options: {
                            cacheName: 'aquifer-api',
                            cacheableResponse: {
                                statuses: [0, 200],
                            },
                        },
                    },
                    {
                        // TODO: update this with the base Aquifer file storage URL
                        urlPattern: /https:\/\/s3.*/,
                        handler: 'StaleWhileRevalidate',
                        method: 'GET',
                        options: {
                            cacheName: 'aquifer-media',
                            cacheableResponse: {
                                statuses: [0, 200],
                            },
                        },
                    },
                ],

                // when `modifyURLPrefix` is set it allows our specified `globPatterns`
                // to override the default behavior. otherwise our `globPatterns` our
                // interpolated and overridden by SvelteKitPWA
                modifyURLPrefix: {},

                // here we specify the manifest transforms directly so that we can
                // override the "../../build" with "index.html"
                manifestTransforms: [
                    async (entries) => {
                        const { manifest } = await createManifestTransform(
                            '/',
                            'manifest.webmanifest',
                            kitConfig
                        )(entries);
                        return {
                            manifest: manifest.map(({ url, ...rest }: { url: string }) => ({
                                ...rest,
                                url: url === '../../build' ? '/index.html' : url,
                            })),
                        };
                    },
                ],
            },
            kit: kitConfig,
            manifest: {
                short_name: 'Aquifer',
                name: 'Aquifer',
                icons: [
                    {
                        src: 'aquifer-logo-512.png',
                        type: 'image/png',
                        sizes: '512x512',
                    },
                    {
                        src: 'aquifer-logo-192.png',
                        type: 'image/png',
                        sizes: '192x192',
                    },
                    {
                        src: 'aquifer-logo-64.png',
                        type: 'image/png',
                        sizes: '64x64 32x32 24x24 16x16',
                    },
                ],
                display: 'standalone',
                start_url: '/',
                theme_color: '#000000',
                background_color: '#ffffff',
            },
        }),
    ],
    test: {
        globals: true,
        environment: 'jsdom',
        setupFiles: ['src/setup-tests.ts'],
        include: ['src/**/*.{test,spec}.{js,ts}'],
    },
});

// copy/paste from https://github.com/vite-pwa/sveltekit/blob/main/src/config.ts
// necessary because we need to use the function above and it's not exported
function createManifestTransform(
    base: string,
    webManifestName?: string,
    options?: KitOptions
): ManifestTransform {
    return async (entries) => {
        const defaultAdapterFallback = 'prerendered/fallback.html';
        const suffix = options?.trailingSlash === 'always' ? '/' : '';
        let adapterFallback = options?.adapterFallback;
        let excludeFallback = false;
        // the fallback will be always generated by SvelteKit.
        // The adapter will copy the fallback only if it is provided in its options: we need to exclude it
        if (!adapterFallback) {
            adapterFallback = defaultAdapterFallback;
            excludeFallback = true;
        }

        // the fallback will be always in .svelte-kit/output/prerendered/fallback.html
        const manifest = entries
            .filter(({ url }) => !(excludeFallback && url === defaultAdapterFallback))
            .map((e) => {
                let url = e.url;
                // client assets in `.svelte-kit/output/client` folder.
                // SSG pages in `.svelte-kit/output/prerendered/pages` folder.
                // fallback page in `.svelte-kit/output/prerendered` folder (fallback.html is the default).
                if (url.startsWith('client/')) url = url.slice(7);
                else if (url.startsWith('prerendered/pages/')) url = url.slice(18);
                else if (url === defaultAdapterFallback) url = adapterFallback;

                if (url.endsWith('.html')) {
                    if (url.startsWith('/')) url = url.slice(1);

                    if (url === 'index.html') {
                        url = base;
                    } else {
                        const idx = url.lastIndexOf('/');
                        if (idx > -1) {
                            // abc/index.html -> abc/?
                            if (url.endsWith('/index.html')) url = `${url.slice(0, idx)}${suffix}`;
                            // abc/def.html -> abc/def/?
                            else url = `${url.substring(0, url.lastIndexOf('.'))}${suffix}`;
                        } else {
                            // xxx.html -> xxx/?
                            url = `${url.substring(0, url.lastIndexOf('.'))}${suffix}`;
                        }
                    }
                }

                e.url = url;

                return e;
            });

        if (!webManifestName) return { manifest };

        return { manifest: manifest.filter((e) => e.url !== webManifestName) };
    };
}
